
timer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e30  08002e30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e30  08002e30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e30  08002e30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002e44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002e44  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1ea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a43  00000000  00000000  0002e226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  0002fc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  00030830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad2d  00000000  00000000  00031358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e419  00000000  00000000  0004c085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d44  00000000  00000000  0005a49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc1e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000316c  00000000  00000000  000fc238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002de0 	.word	0x08002de0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002de0 	.word	0x08002de0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa3c 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80c 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8be 	bl	8000354 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f88c 	bl	80002f4 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80001dc:	f000 f862 	bl	80002a4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80001e0:	4801      	ldr	r0, [pc, #4]	; (80001e8 <main+0x20>)
 80001e2:	f002 f875 	bl	80022d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <main+0x1e>
 80001e8:	200000ac 	.word	0x200000ac

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b09c      	sub	sp, #112	; 0x70
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f002 fde8 	bl	8002dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	463b      	mov	r3, r7
 8000212:	2234      	movs	r2, #52	; 0x34
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 fdda 	bl	8002dd0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800021c:	2301      	movs	r3, #1
 800021e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000220:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000224:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022a:	2301      	movs	r3, #1
 800022c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000236:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000238:	2300      	movs	r3, #0
 800023a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fd1d 	bl	8000c80 <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800024c:	f000 f8fa 	bl	8000444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000260:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000262:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000266:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000268:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fc0e 	bl	8001a90 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800027a:	f000 f8e3 	bl	8000444 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM16;
 800027e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000282:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000284:	2300      	movs	r3, #0
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000288:	463b      	mov	r3, r7
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fe36 	bl	8001efc <HAL_RCCEx_PeriphCLKConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000296:	f000 f8d5 	bl	8000444 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3770      	adds	r7, #112	; 0x70
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80002a8:	4b10      	ldr	r3, [pc, #64]	; (80002ec <MX_TIM16_Init+0x48>)
 80002aa:	4a11      	ldr	r2, [pc, #68]	; (80002f0 <MX_TIM16_Init+0x4c>)
 80002ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000 -1;
 80002ae:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <MX_TIM16_Init+0x48>)
 80002b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002b4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <MX_TIM16_Init+0x48>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000 -1;
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <MX_TIM16_Init+0x48>)
 80002be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <MX_TIM16_Init+0x48>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80002ca:	4b08      	ldr	r3, [pc, #32]	; (80002ec <MX_TIM16_Init+0x48>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <MX_TIM16_Init+0x48>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80002d6:	4805      	ldr	r0, [pc, #20]	; (80002ec <MX_TIM16_Init+0x48>)
 80002d8:	f001 ffa2 	bl	8002220 <HAL_TIM_Base_Init>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80002e2:	f000 f8af 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	200000ac 	.word	0x200000ac
 80002f0:	40014400 	.word	0x40014400

080002f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f8:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_USART2_UART_Init+0x58>)
 80002fa:	4a15      	ldr	r2, [pc, #84]	; (8000350 <MX_USART2_UART_Init+0x5c>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002fe:	4b13      	ldr	r3, [pc, #76]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000300:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_USART2_UART_Init+0x58>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_USART2_UART_Init+0x58>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000332:	2200      	movs	r2, #0
 8000334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_USART2_UART_Init+0x58>)
 8000338:	f002 f9f2 	bl	8002720 <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000342:	f000 f87f 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000028 	.word	0x20000028
 8000350:	40004400 	.word	0x40004400

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08a      	sub	sp, #40	; 0x28
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036a:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <MX_GPIO_Init+0xc4>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a2a      	ldr	r2, [pc, #168]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b28      	ldr	r3, [pc, #160]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800037e:	613b      	str	r3, [r7, #16]
 8000380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000382:	4b25      	ldr	r3, [pc, #148]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a24      	ldr	r2, [pc, #144]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b22      	ldr	r3, [pc, #136]	; (8000418 <MX_GPIO_Init+0xc4>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <MX_GPIO_Init+0xc4>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a1e      	ldr	r2, [pc, #120]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b2:	4b19      	ldr	r3, [pc, #100]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a18      	ldr	r2, [pc, #96]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <MX_GPIO_Init+0xc4>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d0:	4812      	ldr	r0, [pc, #72]	; (800041c <MX_GPIO_Init+0xc8>)
 80003d2:	f000 fc23 	bl	8000c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	4619      	mov	r1, r3
 80003ec:	480c      	ldr	r0, [pc, #48]	; (8000420 <MX_GPIO_Init+0xcc>)
 80003ee:	f000 faa3 	bl	8000938 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2300      	movs	r3, #0
 8000402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4619      	mov	r1, r3
 800040a:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_GPIO_Init+0xc8>)
 800040c:	f000 fa94 	bl	8000938 <HAL_GPIO_Init>

}
 8000410:	bf00      	nop
 8000412:	3728      	adds	r7, #40	; 0x28
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	48000400 	.word	0x48000400
 8000420:	48000800 	.word	0x48000800

08000424 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	4803      	ldr	r0, [pc, #12]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000432:	f000 fc0b 	bl	8000c4c <HAL_GPIO_TogglePin>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	48000400 	.word	0x48000400

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	e7fe      	b.n	800044c <Error_Handler+0x8>
	...

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x44>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_MspInit+0x44>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_MspInit+0x44>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <HAL_MspInit+0x44>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	4a08      	ldr	r2, [pc, #32]	; (8000494 <HAL_MspInit+0x44>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000478:	61d3      	str	r3, [r2, #28]
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <HAL_MspInit+0x44>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000486:	2007      	movs	r0, #7
 8000488:	f000 fa14 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0d      	ldr	r2, [pc, #52]	; (80004dc <HAL_TIM_Base_MspInit+0x44>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d113      	bne.n	80004d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <HAL_TIM_Base_MspInit+0x48>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a0c      	ldr	r2, [pc, #48]	; (80004e0 <HAL_TIM_Base_MspInit+0x48>)
 80004b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_TIM_Base_MspInit+0x48>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2100      	movs	r1, #0
 80004c6:	2019      	movs	r0, #25
 80004c8:	f000 f9ff 	bl	80008ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80004cc:	2019      	movs	r0, #25
 80004ce:	f000 fa18 	bl	8000902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80004d2:	bf00      	nop
 80004d4:	3710      	adds	r7, #16
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40014400 	.word	0x40014400
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a17      	ldr	r2, [pc, #92]	; (8000560 <HAL_UART_MspInit+0x7c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d128      	bne.n	8000558 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a16      	ldr	r2, [pc, #88]	; (8000564 <HAL_UART_MspInit+0x80>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b14      	ldr	r3, [pc, #80]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b11      	ldr	r3, [pc, #68]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <HAL_UART_MspInit+0x80>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_UART_MspInit+0x80>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000536:	230c      	movs	r3, #12
 8000538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2300      	movs	r3, #0
 8000544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000546:	2307      	movs	r3, #7
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f000 f9f0 	bl	8000938 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000558:	bf00      	nop
 800055a:	3728      	adds	r7, #40	; 0x28
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40004400 	.word	0x40004400
 8000564:	40021000 	.word	0x40021000

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800056c:	e7fe      	b.n	800056c <NMI_Handler+0x4>

0800056e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000572:	e7fe      	b.n	8000572 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	e7fe      	b.n	8000578 <MemManage_Handler+0x4>

0800057a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057e:	e7fe      	b.n	800057e <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <UsageFault_Handler+0x4>

08000586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f88e 	bl	80006d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80005c0:	4802      	ldr	r0, [pc, #8]	; (80005cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80005c2:	f001 fed9 	bl	8002378 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000ac 	.word	0x200000ac

080005d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <SystemInit+0x20>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <SystemInit+0x20>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800062c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490e      	ldr	r1, [pc, #56]	; (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0e      	ldr	r2, [pc, #56]	; (8000638 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0b      	ldr	r4, [pc, #44]	; (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800061e:	f7ff ffd7 	bl	80005d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000622:	f002 fbb1 	bl	8002d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000626:	f7ff fdcf 	bl	80001c8 <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800062c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000638:	08002e38 	.word	0x08002e38
  ldr r2, =_sbss
 800063c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000640:	200000fc 	.word	0x200000fc

08000644 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC1_IRQHandler>
	...

08000648 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_Init+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x28>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f92b 	bl	80008b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 f808 	bl	8000674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000664:	f7ff fef4 	bl	8000450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_InitTick+0x54>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_InitTick+0x58>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	fbb3 f3f1 	udiv	r3, r3, r1
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f943 	bl	800091e <HAL_SYSTICK_Config>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e00e      	b.n	80006c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d80a      	bhi.n	80006be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a8:	2200      	movs	r2, #0
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f000 f90b 	bl	80008ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_InitTick+0x5c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e000      	b.n	80006c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000000 	.word	0x20000000
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000004 	.word	0x20000004

080006d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_IncTick+0x20>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_IncTick+0x24>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <HAL_IncTick+0x24>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	20000008 	.word	0x20000008
 80006f8:	200000f8 	.word	0x200000f8

080006fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <HAL_GetTick+0x14>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	200000f8 	.word	0x200000f8

08000714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800073c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	60d3      	str	r3, [r2, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	2b00      	cmp	r3, #0
 8000788:	db0b      	blt.n	80007a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f003 021f 	and.w	r2, r3, #31
 8000790:	4907      	ldr	r1, [pc, #28]	; (80007b0 <__NVIC_EnableIRQ+0x38>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	095b      	lsrs	r3, r3, #5
 8000798:	2001      	movs	r0, #1
 800079a:	fa00 f202 	lsl.w	r2, r0, r2
 800079e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000e100 	.word	0xe000e100

080007b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	6039      	str	r1, [r7, #0]
 80007be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db0a      	blt.n	80007de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	490c      	ldr	r1, [pc, #48]	; (8000800 <__NVIC_SetPriority+0x4c>)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	0112      	lsls	r2, r2, #4
 80007d4:	b2d2      	uxtb	r2, r2
 80007d6:	440b      	add	r3, r1
 80007d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007dc:	e00a      	b.n	80007f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <__NVIC_SetPriority+0x50>)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f003 030f 	and.w	r3, r3, #15
 80007ea:	3b04      	subs	r3, #4
 80007ec:	0112      	lsls	r2, r2, #4
 80007ee:	b2d2      	uxtb	r2, r2
 80007f0:	440b      	add	r3, r1
 80007f2:	761a      	strb	r2, [r3, #24]
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	f1c3 0307 	rsb	r3, r3, #7
 8000822:	2b04      	cmp	r3, #4
 8000824:	bf28      	it	cs
 8000826:	2304      	movcs	r3, #4
 8000828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3304      	adds	r3, #4
 800082e:	2b06      	cmp	r3, #6
 8000830:	d902      	bls.n	8000838 <NVIC_EncodePriority+0x30>
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3b03      	subs	r3, #3
 8000836:	e000      	b.n	800083a <NVIC_EncodePriority+0x32>
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	f04f 32ff 	mov.w	r2, #4294967295
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43da      	mvns	r2, r3
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	401a      	ands	r2, r3
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000850:	f04f 31ff 	mov.w	r1, #4294967295
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	fa01 f303 	lsl.w	r3, r1, r3
 800085a:	43d9      	mvns	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	4313      	orrs	r3, r2
         );
}
 8000862:	4618      	mov	r0, r3
 8000864:	3724      	adds	r7, #36	; 0x24
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000880:	d301      	bcc.n	8000886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000882:	2301      	movs	r3, #1
 8000884:	e00f      	b.n	80008a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <SysTick_Config+0x40>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800088e:	210f      	movs	r1, #15
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	f7ff ff8e 	bl	80007b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <SysTick_Config+0x40>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <SysTick_Config+0x40>)
 80008a0:	2207      	movs	r2, #7
 80008a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010

080008b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ff29 	bl	8000714 <__NVIC_SetPriorityGrouping>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008dc:	f7ff ff3e 	bl	800075c <__NVIC_GetPriorityGrouping>
 80008e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	6978      	ldr	r0, [r7, #20]
 80008e8:	f7ff ff8e 	bl	8000808 <NVIC_EncodePriority>
 80008ec:	4602      	mov	r2, r0
 80008ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff ff5d 	bl	80007b4 <__NVIC_SetPriority>
}
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff31 	bl	8000778 <__NVIC_EnableIRQ>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ffa2 	bl	8000870 <SysTick_Config>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e14e      	b.n	8000be6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 8140 	beq.w	8000be0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f003 0303 	and.w	r3, r3, #3
 8000968:	2b01      	cmp	r3, #1
 800096a:	d005      	beq.n	8000978 <HAL_GPIO_Init+0x40>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d130      	bne.n	80009da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ae:	2201      	movs	r2, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	f003 0201 	and.w	r2, r3, #1
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d017      	beq.n	8000a16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d123      	bne.n	8000a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	08da      	lsrs	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3208      	adds	r2, #8
 8000a64:	6939      	ldr	r1, [r7, #16]
 8000a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0203 	and.w	r2, r3, #3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 809a 	beq.w	8000be0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aac:	4b55      	ldr	r3, [pc, #340]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a54      	ldr	r2, [pc, #336]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b52      	ldr	r3, [pc, #328]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ac4:	4a50      	ldr	r2, [pc, #320]	; (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3302      	adds	r3, #2
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	220f      	movs	r2, #15
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aee:	d013      	beq.n	8000b18 <HAL_GPIO_Init+0x1e0>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <HAL_GPIO_Init+0x2d4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d00d      	beq.n	8000b14 <HAL_GPIO_Init+0x1dc>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a45      	ldr	r2, [pc, #276]	; (8000c10 <HAL_GPIO_Init+0x2d8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d007      	beq.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a44      	ldr	r2, [pc, #272]	; (8000c14 <HAL_GPIO_Init+0x2dc>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d101      	bne.n	8000b0c <HAL_GPIO_Init+0x1d4>
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e006      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b0c:	2305      	movs	r3, #5
 8000b0e:	e004      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b10:	2302      	movs	r3, #2
 8000b12:	e002      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	f002 0203 	and.w	r2, r2, #3
 8000b20:	0092      	lsls	r2, r2, #2
 8000b22:	4093      	lsls	r3, r2
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b2a:	4937      	ldr	r1, [pc, #220]	; (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	3302      	adds	r3, #2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b38:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b5c:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b86:	4a24      	ldr	r2, [pc, #144]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bb0:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <HAL_GPIO_Init+0x2e0>)
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3301      	adds	r3, #1
 8000be4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	f47f aea9 	bne.w	8000948 <HAL_GPIO_Init+0x10>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40010000 	.word	0x40010000
 8000c0c:	48000400 	.word	0x48000400
 8000c10:	48000800 	.word	0x48000800
 8000c14:	48000c00 	.word	0x48000c00
 8000c18:	40010400 	.word	0x40010400

08000c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c2c:	787b      	ldrb	r3, [r7, #1]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c38:	e002      	b.n	8000c40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3a:	887a      	ldrh	r2, [r7, #2]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c5e:	887a      	ldrh	r2, [r7, #2]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4013      	ands	r3, r2
 8000c64:	041a      	lsls	r2, r3, #16
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43d9      	mvns	r1, r3
 8000c6a:	887b      	ldrh	r3, [r7, #2]
 8000c6c:	400b      	ands	r3, r1
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	619a      	str	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	f000 bef4 	b.w	8001a82 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0301 	and.w	r3, r3, #1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 816a 	beq.w	8000f7e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000caa:	4bb3      	ldr	r3, [pc, #716]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 030c 	and.w	r3, r3, #12
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d00c      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cb6:	4bb0      	ldr	r3, [pc, #704]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 030c 	and.w	r3, r3, #12
 8000cbe:	2b08      	cmp	r3, #8
 8000cc0:	d159      	bne.n	8000d76 <HAL_RCC_OscConfig+0xf6>
 8000cc2:	4bad      	ldr	r3, [pc, #692]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cce:	d152      	bne.n	8000d76 <HAL_RCC_OscConfig+0xf6>
 8000cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000cdc:	fa93 f3a3 	rbit	r3, r3
 8000ce0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ce4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	fab3 f383 	clz	r3, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d102      	bne.n	8000d02 <HAL_RCC_OscConfig+0x82>
 8000cfc:	4b9e      	ldr	r3, [pc, #632]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	e015      	b.n	8000d2e <HAL_RCC_OscConfig+0xae>
 8000d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d06:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d0e:	fa93 f3a3 	rbit	r3, r3
 8000d12:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d1a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d1e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d22:	fa93 f3a3 	rbit	r3, r3
 8000d26:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d2a:	4b93      	ldr	r3, [pc, #588]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d32:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d36:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d3a:	fa92 f2a2 	rbit	r2, r2
 8000d3e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d42:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	f042 0220 	orr.w	r2, r2, #32
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	f002 021f 	and.w	r2, r2, #31
 8000d56:	2101      	movs	r1, #1
 8000d58:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 810c 	beq.w	8000f7c <HAL_RCC_OscConfig+0x2fc>
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 8106 	bne.w	8000f7c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f000 be86 	b.w	8001a82 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d80:	d106      	bne.n	8000d90 <HAL_RCC_OscConfig+0x110>
 8000d82:	4b7d      	ldr	r3, [pc, #500]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a7c      	ldr	r2, [pc, #496]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e030      	b.n	8000df2 <HAL_RCC_OscConfig+0x172>
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <HAL_RCC_OscConfig+0x134>
 8000d9a:	4b77      	ldr	r3, [pc, #476]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a76      	ldr	r2, [pc, #472]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4b74      	ldr	r3, [pc, #464]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a73      	ldr	r2, [pc, #460]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e01e      	b.n	8000df2 <HAL_RCC_OscConfig+0x172>
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dbe:	d10c      	bne.n	8000dda <HAL_RCC_OscConfig+0x15a>
 8000dc0:	4b6d      	ldr	r3, [pc, #436]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a6c      	ldr	r2, [pc, #432]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	4b6a      	ldr	r3, [pc, #424]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a69      	ldr	r2, [pc, #420]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e00b      	b.n	8000df2 <HAL_RCC_OscConfig+0x172>
 8000dda:	4b67      	ldr	r3, [pc, #412]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a66      	ldr	r2, [pc, #408]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b64      	ldr	r3, [pc, #400]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a63      	ldr	r2, [pc, #396]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000df2:	4b61      	ldr	r3, [pc, #388]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df6:	f023 020f 	bic.w	r2, r3, #15
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	495d      	ldr	r1, [pc, #372]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d059      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e10:	f7ff fc74 	bl	80006fc <HAL_GetTick>
 8000e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e18:	e00a      	b.n	8000e30 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e1a:	f7ff fc6f 	bl	80006fc <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d902      	bls.n	8000e30 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	f000 be29 	b.w	8001a82 <HAL_RCC_OscConfig+0xe02>
 8000e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e34:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e3c:	fa93 f3a3 	rbit	r3, r3
 8000e40:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e44:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e48:	fab3 f383 	clz	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d102      	bne.n	8000e62 <HAL_RCC_OscConfig+0x1e2>
 8000e5c:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	e015      	b.n	8000e8e <HAL_RCC_OscConfig+0x20e>
 8000e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e66:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e7a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e7e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e82:	fa93 f3a3 	rbit	r3, r3
 8000e86:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e92:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e96:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e9a:	fa92 f2a2 	rbit	r2, r2
 8000e9e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ea2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ea6:	fab2 f282 	clz	r2, r2
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	f042 0220 	orr.w	r2, r2, #32
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	f002 021f 	and.w	r2, r2, #31
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0ab      	beq.n	8000e1a <HAL_RCC_OscConfig+0x19a>
 8000ec2:	e05c      	b.n	8000f7e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fc1a 	bl	80006fc <HAL_GetTick>
 8000ec8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ecc:	e00a      	b.n	8000ee4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ece:	f7ff fc15 	bl	80006fc <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	; 0x64
 8000edc:	d902      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	f000 bdcf 	b.w	8001a82 <HAL_RCC_OscConfig+0xe02>
 8000ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000ef0:	fa93 f3a3 	rbit	r3, r3
 8000ef4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ef8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efc:	fab3 f383 	clz	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d102      	bne.n	8000f16 <HAL_RCC_OscConfig+0x296>
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	e015      	b.n	8000f42 <HAL_RCC_OscConfig+0x2c2>
 8000f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f32:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_RCC_OscConfig+0x2f8>)
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f46:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f4a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f4e:	fa92 f2a2 	rbit	r2, r2
 8000f52:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f56:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f5a:	fab2 f282 	clz	r2, r2
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	f042 0220 	orr.w	r2, r2, #32
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	f002 021f 	and.w	r2, r2, #31
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1ab      	bne.n	8000ece <HAL_RCC_OscConfig+0x24e>
 8000f76:	e002      	b.n	8000f7e <HAL_RCC_OscConfig+0x2fe>
 8000f78:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f000 816f 	beq.w	800126c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f8e:	4bd0      	ldr	r3, [pc, #832]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f9a:	4bcd      	ldr	r3, [pc, #820]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d16c      	bne.n	8001080 <HAL_RCC_OscConfig+0x400>
 8000fa6:	4bca      	ldr	r3, [pc, #808]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d166      	bne.n	8001080 <HAL_RCC_OscConfig+0x400>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fbc:	fa93 f3a3 	rbit	r3, r3
 8000fc0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000fc4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d102      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x362>
 8000fdc:	4bbc      	ldr	r3, [pc, #752]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	e013      	b.n	800100a <HAL_RCC_OscConfig+0x38a>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000fec:	fa93 f3a3 	rbit	r3, r3
 8000ff0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000ffa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001006:	4bb2      	ldr	r3, [pc, #712]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	2202      	movs	r2, #2
 800100c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001010:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001014:	fa92 f2a2 	rbit	r2, r2
 8001018:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800101c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001020:	fab2 f282 	clz	r2, r2
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	f042 0220 	orr.w	r2, r2, #32
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	f002 021f 	and.w	r2, r2, #31
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d007      	beq.n	800104c <HAL_RCC_OscConfig+0x3cc>
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d002      	beq.n	800104c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	f000 bd1b 	b.w	8001a82 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4ba0      	ldr	r3, [pc, #640]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	21f8      	movs	r1, #248	; 0xf8
 800105c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001064:	fa91 f1a1 	rbit	r1, r1
 8001068:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800106c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001070:	fab1 f181 	clz	r1, r1
 8001074:	b2c9      	uxtb	r1, r1
 8001076:	408b      	lsls	r3, r1
 8001078:	4995      	ldr	r1, [pc, #596]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 800107a:	4313      	orrs	r3, r2
 800107c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	e0f5      	b.n	800126c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8085 	beq.w	8001196 <HAL_RCC_OscConfig+0x516>
 800108c:	2301      	movs	r3, #1
 800108e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001096:	fa93 f3a3 	rbit	r3, r3
 800109a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800109e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010a2:	fab3 f383 	clz	r3, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	461a      	mov	r2, r3
 80010b4:	2301      	movs	r3, #1
 80010b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fb20 	bl	80006fc <HAL_GetTick>
 80010bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fb1b 	bl	80006fc <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d902      	bls.n	80010d8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f000 bcd5 	b.w	8001a82 <HAL_RCC_OscConfig+0xe02>
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80010ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ee:	fab3 f383 	clz	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	095b      	lsrs	r3, r3, #5
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d102      	bne.n	8001108 <HAL_RCC_OscConfig+0x488>
 8001102:	4b73      	ldr	r3, [pc, #460]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	e013      	b.n	8001130 <HAL_RCC_OscConfig+0x4b0>
 8001108:	2302      	movs	r3, #2
 800110a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800111a:	2302      	movs	r3, #2
 800111c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001120:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001124:	fa93 f3a3 	rbit	r3, r3
 8001128:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	2202      	movs	r2, #2
 8001132:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001136:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800113a:	fa92 f2a2 	rbit	r2, r2
 800113e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001142:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001146:	fab2 f282 	clz	r2, r2
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	f042 0220 	orr.w	r2, r2, #32
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	f002 021f 	and.w	r2, r2, #31
 8001156:	2101      	movs	r1, #1
 8001158:	fa01 f202 	lsl.w	r2, r1, r2
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0af      	beq.n	80010c2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001162:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	21f8      	movs	r1, #248	; 0xf8
 8001172:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001176:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800117a:	fa91 f1a1 	rbit	r1, r1
 800117e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001182:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001186:	fab1 f181 	clz	r1, r1
 800118a:	b2c9      	uxtb	r1, r1
 800118c:	408b      	lsls	r3, r1
 800118e:	4950      	ldr	r1, [pc, #320]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 8001190:	4313      	orrs	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
 8001194:	e06a      	b.n	800126c <HAL_RCC_OscConfig+0x5ec>
 8001196:	2301      	movs	r3, #1
 8001198:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011a0:	fa93 f3a3 	rbit	r3, r3
 80011a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ac:	fab3 f383 	clz	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	461a      	mov	r2, r3
 80011be:	2300      	movs	r3, #0
 80011c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c2:	f7ff fa9b 	bl	80006fc <HAL_GetTick>
 80011c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	e00a      	b.n	80011e2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011cc:	f7ff fa96 	bl	80006fc <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d902      	bls.n	80011e2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	f000 bc50 	b.w	8001a82 <HAL_RCC_OscConfig+0xe02>
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80011ec:	fa93 f3a3 	rbit	r3, r3
 80011f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80011f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f8:	fab3 f383 	clz	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d102      	bne.n	8001212 <HAL_RCC_OscConfig+0x592>
 800120c:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	e013      	b.n	800123a <HAL_RCC_OscConfig+0x5ba>
 8001212:	2302      	movs	r3, #2
 8001214:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001218:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800121c:	fa93 f3a3 	rbit	r3, r3
 8001220:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001224:	2302      	movs	r3, #2
 8001226:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800122a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <HAL_RCC_OscConfig+0x650>)
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	2202      	movs	r2, #2
 800123c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001240:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001244:	fa92 f2a2 	rbit	r2, r2
 8001248:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800124c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001250:	fab2 f282 	clz	r2, r2
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	f042 0220 	orr.w	r2, r2, #32
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	f002 021f 	and.w	r2, r2, #31
 8001260:	2101      	movs	r1, #1
 8001262:	fa01 f202 	lsl.w	r2, r1, r2
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1af      	bne.n	80011cc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 80da 	beq.w	8001430 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d069      	beq.n	800135a <HAL_RCC_OscConfig+0x6da>
 8001286:	2301      	movs	r3, #1
 8001288:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001290:	fa93 f3a3 	rbit	r3, r3
 8001294:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800129c:	fab3 f383 	clz	r3, r3
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_RCC_OscConfig+0x654>)
 80012a6:	4413      	add	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	461a      	mov	r2, r3
 80012ac:	2301      	movs	r3, #1
 80012ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b0:	f7ff fa24 	bl	80006fc <HAL_GetTick>
 80012b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b8:	e00e      	b.n	80012d8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ba:	f7ff fa1f 	bl	80006fc <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d906      	bls.n	80012d8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e3d9      	b.n	8001a82 <HAL_RCC_OscConfig+0xe02>
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000
 80012d4:	10908120 	.word	0x10908120
 80012d8:	2302      	movs	r3, #2
 80012da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80012ea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012ee:	2202      	movs	r2, #2
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	fa93 f2a3 	rbit	r2, r3
 80012fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001306:	2202      	movs	r2, #2
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	fa93 f2a3 	rbit	r2, r3
 8001314:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001318:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131a:	4ba5      	ldr	r3, [pc, #660]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 800131c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800131e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001322:	2102      	movs	r1, #2
 8001324:	6019      	str	r1, [r3, #0]
 8001326:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	fa93 f1a3 	rbit	r1, r3
 8001330:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001334:	6019      	str	r1, [r3, #0]
  return result;
 8001336:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	fab3 f383 	clz	r3, r3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	2101      	movs	r1, #1
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0b0      	beq.n	80012ba <HAL_RCC_OscConfig+0x63a>
 8001358:	e06a      	b.n	8001430 <HAL_RCC_OscConfig+0x7b0>
 800135a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	fa93 f2a3 	rbit	r2, r3
 800136c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001370:	601a      	str	r2, [r3, #0]
  return result;
 8001372:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001376:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001378:	fab3 f383 	clz	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	461a      	mov	r2, r3
 8001380:	4b8c      	ldr	r3, [pc, #560]	; (80015b4 <HAL_RCC_OscConfig+0x934>)
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	461a      	mov	r2, r3
 8001388:	2300      	movs	r3, #0
 800138a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138c:	f7ff f9b6 	bl	80006fc <HAL_GetTick>
 8001390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001394:	e009      	b.n	80013aa <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001396:	f7ff f9b1 	bl	80006fc <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e36b      	b.n	8001a82 <HAL_RCC_OscConfig+0xe02>
 80013aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013ae:	2202      	movs	r2, #2
 80013b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	fa93 f2a3 	rbit	r2, r3
 80013bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013c6:	2202      	movs	r2, #2
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	fa93 f2a3 	rbit	r2, r3
 80013d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013de:	2202      	movs	r2, #2
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	fa93 f2a3 	rbit	r2, r3
 80013ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f2:	4b6f      	ldr	r3, [pc, #444]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 80013f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013fa:	2102      	movs	r1, #2
 80013fc:	6019      	str	r1, [r3, #0]
 80013fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fa93 f1a3 	rbit	r1, r3
 8001408:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800140c:	6019      	str	r1, [r3, #0]
  return result;
 800140e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1b2      	bne.n	8001396 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 8158 	beq.w	80016f0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001446:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d112      	bne.n	8001478 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a56      	ldr	r2, [pc, #344]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b54      	ldr	r3, [pc, #336]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001478:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <HAL_RCC_OscConfig+0x938>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d11a      	bne.n	80014ba <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001484:	4b4c      	ldr	r3, [pc, #304]	; (80015b8 <HAL_RCC_OscConfig+0x938>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a4b      	ldr	r2, [pc, #300]	; (80015b8 <HAL_RCC_OscConfig+0x938>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001490:	f7ff f934 	bl	80006fc <HAL_GetTick>
 8001494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	e009      	b.n	80014ae <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149a:	f7ff f92f 	bl	80006fc <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	; 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e2e9      	b.n	8001a82 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <HAL_RCC_OscConfig+0x938>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0ef      	beq.n	800149a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x852>
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	4a39      	ldr	r2, [pc, #228]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6213      	str	r3, [r2, #32]
 80014d0:	e02f      	b.n	8001532 <HAL_RCC_OscConfig+0x8b2>
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10c      	bne.n	80014f6 <HAL_RCC_OscConfig+0x876>
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a33      	ldr	r2, [pc, #204]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	6213      	str	r3, [r2, #32]
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a30      	ldr	r2, [pc, #192]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 80014ee:	f023 0304 	bic.w	r3, r3, #4
 80014f2:	6213      	str	r3, [r2, #32]
 80014f4:	e01d      	b.n	8001532 <HAL_RCC_OscConfig+0x8b2>
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	d10c      	bne.n	800151a <HAL_RCC_OscConfig+0x89a>
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 8001506:	f043 0304 	orr.w	r3, r3, #4
 800150a:	6213      	str	r3, [r2, #32]
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a27      	ldr	r2, [pc, #156]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6213      	str	r3, [r2, #32]
 8001518:	e00b      	b.n	8001532 <HAL_RCC_OscConfig+0x8b2>
 800151a:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4a24      	ldr	r2, [pc, #144]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	6213      	str	r3, [r2, #32]
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 800152c:	f023 0304 	bic.w	r3, r3, #4
 8001530:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d06b      	beq.n	8001614 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff f8de 	bl	80006fc <HAL_GetTick>
 8001540:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	e00b      	b.n	800155e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff f8d9 	bl	80006fc <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e291      	b.n	8001a82 <HAL_RCC_OscConfig+0xe02>
 800155e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001562:	2202      	movs	r2, #2
 8001564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	fa93 f2a3 	rbit	r2, r3
 8001570:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800157a:	2202      	movs	r2, #2
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800158c:	601a      	str	r2, [r3, #0]
  return result;
 800158e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001592:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f043 0302 	orr.w	r3, r3, #2
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d109      	bne.n	80015bc <HAL_RCC_OscConfig+0x93c>
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <HAL_RCC_OscConfig+0x930>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	e014      	b.n	80015d8 <HAL_RCC_OscConfig+0x958>
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	10908120 	.word	0x10908120
 80015b8:	40007000 	.word	0x40007000
 80015bc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015c0:	2202      	movs	r2, #2
 80015c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	fa93 f2a3 	rbit	r2, r3
 80015ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	4bbb      	ldr	r3, [pc, #748]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015dc:	2102      	movs	r1, #2
 80015de:	6011      	str	r1, [r2, #0]
 80015e0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	fa92 f1a2 	rbit	r1, r2
 80015ea:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80015ee:	6011      	str	r1, [r2, #0]
  return result;
 80015f0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	fab2 f282 	clz	r2, r2
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	f002 021f 	and.w	r2, r2, #31
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	4013      	ands	r3, r2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d099      	beq.n	8001546 <HAL_RCC_OscConfig+0x8c6>
 8001612:	e063      	b.n	80016dc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff f872 	bl	80006fc <HAL_GetTick>
 8001618:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00b      	b.n	8001636 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff f86d 	bl	80006fc <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	; 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e225      	b.n	8001a82 <HAL_RCC_OscConfig+0xe02>
 8001636:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800163a:	2202      	movs	r2, #2
 800163c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fa93 f2a3 	rbit	r2, r3
 8001648:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001652:	2202      	movs	r2, #2
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	fa93 f2a3 	rbit	r2, r3
 8001660:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001664:	601a      	str	r2, [r3, #0]
  return result;
 8001666:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800166a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166c:	fab3 f383 	clz	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f043 0302 	orr.w	r3, r3, #2
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d102      	bne.n	8001686 <HAL_RCC_OscConfig+0xa06>
 8001680:	4b90      	ldr	r3, [pc, #576]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	e00d      	b.n	80016a2 <HAL_RCC_OscConfig+0xa22>
 8001686:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800168a:	2202      	movs	r2, #2
 800168c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	fa93 f2a3 	rbit	r2, r3
 8001698:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	4b89      	ldr	r3, [pc, #548]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016a6:	2102      	movs	r1, #2
 80016a8:	6011      	str	r1, [r2, #0]
 80016aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	fa92 f1a2 	rbit	r1, r2
 80016b4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016b8:	6011      	str	r1, [r2, #0]
  return result;
 80016ba:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	fab2 f282 	clz	r2, r2
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	f002 021f 	and.w	r2, r2, #31
 80016d0:	2101      	movs	r1, #1
 80016d2:	fa01 f202 	lsl.w	r2, r1, r2
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1a0      	bne.n	800161e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016dc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e4:	4b77      	ldr	r3, [pc, #476]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a76      	ldr	r2, [pc, #472]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80016ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ee:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 81c2 	beq.w	8001a80 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016fc:	4b71      	ldr	r3, [pc, #452]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 030c 	and.w	r3, r3, #12
 8001704:	2b08      	cmp	r3, #8
 8001706:	f000 819c 	beq.w	8001a42 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	2b02      	cmp	r3, #2
 8001712:	f040 8114 	bne.w	800193e <HAL_RCC_OscConfig+0xcbe>
 8001716:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800171a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800171e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	fa93 f2a3 	rbit	r2, r3
 800172a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800172e:	601a      	str	r2, [r3, #0]
  return result;
 8001730:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001734:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	fab3 f383 	clz	r3, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001740:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	461a      	mov	r2, r3
 8001748:	2300      	movs	r3, #0
 800174a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7fe ffd6 	bl	80006fc <HAL_GetTick>
 8001750:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	e009      	b.n	800176a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001756:	f7fe ffd1 	bl	80006fc <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e18b      	b.n	8001a82 <HAL_RCC_OscConfig+0xe02>
 800176a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800176e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	fa93 f2a3 	rbit	r2, r3
 800177e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001782:	601a      	str	r2, [r3, #0]
  return result;
 8001784:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001788:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	fab3 f383 	clz	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	095b      	lsrs	r3, r3, #5
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d102      	bne.n	80017a4 <HAL_RCC_OscConfig+0xb24>
 800179e:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	e01b      	b.n	80017dc <HAL_RCC_OscConfig+0xb5c>
 80017a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fa93 f2a3 	rbit	r2, r3
 80017b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	fa93 f2a3 	rbit	r2, r3
 80017d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017e4:	6011      	str	r1, [r2, #0]
 80017e6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	fa92 f1a2 	rbit	r1, r2
 80017f0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80017f4:	6011      	str	r1, [r2, #0]
  return result;
 80017f6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fab2 f282 	clz	r2, r2
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	f042 0220 	orr.w	r2, r2, #32
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f002 021f 	and.w	r2, r2, #31
 800180c:	2101      	movs	r1, #1
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d19e      	bne.n	8001756 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001818:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	430b      	orrs	r3, r1
 800182e:	4925      	ldr	r1, [pc, #148]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
 8001834:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001838:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800183c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	fa93 f2a3 	rbit	r2, r3
 8001848:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800184c:	601a      	str	r2, [r3, #0]
  return result;
 800184e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001852:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800185e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	461a      	mov	r2, r3
 8001866:	2301      	movs	r3, #1
 8001868:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7fe ff47 	bl	80006fc <HAL_GetTick>
 800186e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001872:	e009      	b.n	8001888 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7fe ff42 	bl	80006fc <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0fc      	b.n	8001a82 <HAL_RCC_OscConfig+0xe02>
 8001888:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800188c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	fa93 f2a3 	rbit	r2, r3
 800189c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a0:	601a      	str	r2, [r3, #0]
  return result;
 80018a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0xc48>
 80018bc:	4b01      	ldr	r3, [pc, #4]	; (80018c4 <HAL_RCC_OscConfig+0xc44>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	e01e      	b.n	8001900 <HAL_RCC_OscConfig+0xc80>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	fa93 f2a3 	rbit	r2, r3
 80018dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_OscConfig+0xe0c>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001904:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001908:	6011      	str	r1, [r2, #0]
 800190a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	fa92 f1a2 	rbit	r1, r2
 8001914:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001918:	6011      	str	r1, [r2, #0]
  return result;
 800191a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	fab2 f282 	clz	r2, r2
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	f042 0220 	orr.w	r2, r2, #32
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	f002 021f 	and.w	r2, r2, #31
 8001930:	2101      	movs	r1, #1
 8001932:	fa01 f202 	lsl.w	r2, r1, r2
 8001936:	4013      	ands	r3, r2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d09b      	beq.n	8001874 <HAL_RCC_OscConfig+0xbf4>
 800193c:	e0a0      	b.n	8001a80 <HAL_RCC_OscConfig+0xe00>
 800193e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001942:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	fa93 f2a3 	rbit	r2, r3
 8001952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001956:	601a      	str	r2, [r3, #0]
  return result;
 8001958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001968:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	461a      	mov	r2, r3
 8001970:	2300      	movs	r3, #0
 8001972:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7fe fec2 	bl	80006fc <HAL_GetTick>
 8001978:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197c:	e009      	b.n	8001992 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197e:	f7fe febd 	bl	80006fc <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e077      	b.n	8001a82 <HAL_RCC_OscConfig+0xe02>
 8001992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001996:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800199a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019aa:	601a      	str	r2, [r3, #0]
  return result;
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d102      	bne.n	80019cc <HAL_RCC_OscConfig+0xd4c>
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_RCC_OscConfig+0xe0c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	e01b      	b.n	8001a04 <HAL_RCC_OscConfig+0xd84>
 80019cc:	f107 0320 	add.w	r3, r7, #32
 80019d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f107 0320 	add.w	r3, r7, #32
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f2a3 	rbit	r2, r3
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f107 0318 	add.w	r3, r7, #24
 80019ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	fa93 f2a3 	rbit	r2, r3
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <HAL_RCC_OscConfig+0xe0c>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f107 0210 	add.w	r2, r7, #16
 8001a08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a0c:	6011      	str	r1, [r2, #0]
 8001a0e:	f107 0210 	add.w	r2, r7, #16
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	fa92 f1a2 	rbit	r1, r2
 8001a18:	f107 020c 	add.w	r2, r7, #12
 8001a1c:	6011      	str	r1, [r2, #0]
  return result;
 8001a1e:	f107 020c 	add.w	r2, r7, #12
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	fab2 f282 	clz	r2, r2
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	f042 0220 	orr.w	r2, r2, #32
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f002 021f 	and.w	r2, r2, #31
 8001a34:	2101      	movs	r1, #1
 8001a36:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d19e      	bne.n	800197e <HAL_RCC_OscConfig+0xcfe>
 8001a40:	e01e      	b.n	8001a80 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e018      	b.n	8001a82 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_RCC_OscConfig+0xe0c>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a58:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a6a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000

08001a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b09e      	sub	sp, #120	; 0x78
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e162      	b.n	8001d6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b90      	ldr	r3, [pc, #576]	; (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d910      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b8d      	ldr	r3, [pc, #564]	; (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 0207 	bic.w	r2, r3, #7
 8001abe:	498b      	ldr	r1, [pc, #556]	; (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b89      	ldr	r3, [pc, #548]	; (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e14a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ae4:	4b82      	ldr	r3, [pc, #520]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	497f      	ldr	r1, [pc, #508]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80dc 	beq.w	8001cbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d13c      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xf6>
 8001b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d102      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xa6>
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	e00f      	b.n	8001b56 <HAL_RCC_ClockConfig+0xc6>
 8001b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b3e:	fa93 f3a3 	rbit	r3, r3
 8001b42:	667b      	str	r3, [r7, #100]	; 0x64
 8001b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b48:	663b      	str	r3, [r7, #96]	; 0x60
 8001b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b52:	4b67      	ldr	r3, [pc, #412]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b5e:	fa92 f2a2 	rbit	r2, r2
 8001b62:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b66:	fab2 f282 	clz	r2, r2
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	f042 0220 	orr.w	r2, r2, #32
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	f002 021f 	and.w	r2, r2, #31
 8001b76:	2101      	movs	r1, #1
 8001b78:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d17b      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0f3      	b.n	8001d6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d13c      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x178>
 8001b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	fab3 f383 	clz	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	095b      	lsrs	r3, r3, #5
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x128>
 8001bb2:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	e00f      	b.n	8001bd8 <HAL_RCC_ClockConfig+0x148>
 8001bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bca:	643b      	str	r3, [r7, #64]	; 0x40
 8001bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bce:	fa93 f3a3 	rbit	r3, r3
 8001bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd4:	4b46      	ldr	r3, [pc, #280]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bdc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001be0:	fa92 f2a2 	rbit	r2, r2
 8001be4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001be8:	fab2 f282 	clz	r2, r2
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f042 0220 	orr.w	r2, r2, #32
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	f002 021f 	and.w	r2, r2, #31
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d13a      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0b2      	b.n	8001d6e <HAL_RCC_ClockConfig+0x2de>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0e:	fa93 f3a3 	rbit	r3, r3
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x1a0>
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	e00d      	b.n	8001c4c <HAL_RCC_ClockConfig+0x1bc>
 8001c30:	2302      	movs	r3, #2
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	61ba      	str	r2, [r7, #24]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	fa92 f2a2 	rbit	r2, r2
 8001c56:	617a      	str	r2, [r7, #20]
  return result;
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	fab2 f282 	clz	r2, r2
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	f042 0220 	orr.w	r2, r2, #32
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	f002 021f 	and.w	r2, r2, #31
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e079      	b.n	8001d6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	491a      	ldr	r1, [pc, #104]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c8c:	f7fe fd36 	bl	80006fc <HAL_GetTick>
 8001c90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7fe fd32 	bl	80006fc <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e061      	b.n	8001d6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_RCC_ClockConfig+0x260>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 020c 	and.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1eb      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d214      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0207 	bic.w	r2, r3, #7
 8001cd2:	4906      	ldr	r1, [pc, #24]	; (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_RCC_ClockConfig+0x25c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e040      	b.n	8001d6e <HAL_RCC_ClockConfig+0x2de>
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCC_ClockConfig+0x2e8>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	491a      	ldr	r1, [pc, #104]	; (8001d78 <HAL_RCC_ClockConfig+0x2e8>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <HAL_RCC_ClockConfig+0x2e8>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4912      	ldr	r1, [pc, #72]	; (8001d78 <HAL_RCC_ClockConfig+0x2e8>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d32:	f000 f829 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d36:	4601      	mov	r1, r0
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_RCC_ClockConfig+0x2e8>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d40:	22f0      	movs	r2, #240	; 0xf0
 8001d42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	fa92 f2a2 	rbit	r2, r2
 8001d4a:	60fa      	str	r2, [r7, #12]
  return result;
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	fab2 f282 	clz	r2, r2
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	40d3      	lsrs	r3, r2
 8001d56:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <HAL_RCC_ClockConfig+0x2ec>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_RCC_ClockConfig+0x2f0>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_RCC_ClockConfig+0x2f4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc84 	bl	8000674 <HAL_InitTick>
  
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3778      	adds	r7, #120	; 0x78
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08002df8 	.word	0x08002df8
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000004 	.word	0x20000004

08001d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b08b      	sub	sp, #44	; 0x2c
 8001d8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	2300      	movs	r3, #0
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d002      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x30>
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_GetSysClockFreq+0x36>
 8001db6:	e03c      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dba:	623b      	str	r3, [r7, #32]
      break;
 8001dbc:	e03c      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001dc4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001dc8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	fa92 f2a2 	rbit	r2, r2
 8001dd0:	607a      	str	r2, [r7, #4]
  return result;
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	40d3      	lsrs	r3, r2
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	220f      	movs	r2, #15
 8001dec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	fa92 f2a2 	rbit	r2, r2
 8001df4:	60fa      	str	r2, [r7, #12]
  return result;
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	40d3      	lsrs	r3, r2
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
 8001e04:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e20:	e004      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	623b      	str	r3, [r7, #32]
      break;
 8001e30:	e002      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e34:	623b      	str	r3, [r7, #32]
      break;
 8001e36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e38:	6a3b      	ldr	r3, [r7, #32]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	372c      	adds	r7, #44	; 0x2c
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	007a1200 	.word	0x007a1200
 8001e50:	08002e10 	.word	0x08002e10
 8001e54:	08002e20 	.word	0x08002e20
 8001e58:	003d0900 	.word	0x003d0900

08001e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000000 	.word	0x20000000

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001e7a:	f7ff ffef 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001e7e:	4601      	mov	r1, r0
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	fa92 f2a2 	rbit	r2, r2
 8001e94:	603a      	str	r2, [r7, #0]
  return result;
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	fab2 f282 	clz	r2, r2
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	40d3      	lsrs	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	08002e08 	.word	0x08002e08

08001eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ebe:	f7ff ffcd 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001ec2:	4601      	mov	r1, r0
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001ecc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ed0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	fa92 f2a2 	rbit	r2, r2
 8001ed8:	603a      	str	r2, [r7, #0]
  return result;
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	fab2 f282 	clz	r2, r2
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	40d3      	lsrs	r3, r2
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08002e08 	.word	0x08002e08

08001efc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b092      	sub	sp, #72	; 0x48
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80d4 	beq.w	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f20:	4b4e      	ldr	r3, [pc, #312]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10e      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	4b4b      	ldr	r3, [pc, #300]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	4a4a      	ldr	r2, [pc, #296]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f36:	61d3      	str	r3, [r2, #28]
 8001f38:	4b48      	ldr	r3, [pc, #288]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4a:	4b45      	ldr	r3, [pc, #276]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d118      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f56:	4b42      	ldr	r3, [pc, #264]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a41      	ldr	r2, [pc, #260]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f62:	f7fe fbcb 	bl	80006fc <HAL_GetTick>
 8001f66:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f68:	e008      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6a:	f7fe fbc7 	bl	80006fc <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b64      	cmp	r3, #100	; 0x64
 8001f76:	d901      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e14b      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	4b38      	ldr	r3, [pc, #224]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f88:	4b34      	ldr	r3, [pc, #208]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8084 	beq.w	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d07c      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ffa:	4a18      	ldr	r2, [pc, #96]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ffe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d04b      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe fb77 	bl	80006fc <HAL_GetTick>
 800200e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002010:	e00a      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7fe fb73 	bl	80006fc <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e0f5      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002028:	2302      	movs	r3, #2
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
 8002034:	2302      	movs	r3, #2
 8002036:	623b      	str	r3, [r7, #32]
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	61fb      	str	r3, [r7, #28]
  return result;
 8002040:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d108      	bne.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002056:	4b01      	ldr	r3, [pc, #4]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	e00d      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	10908100 	.word	0x10908100
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	4b69      	ldr	r3, [pc, #420]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2202      	movs	r2, #2
 800207a:	613a      	str	r2, [r7, #16]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	fa92 f2a2 	rbit	r2, r2
 8002082:	60fa      	str	r2, [r7, #12]
  return result;
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	fab2 f282 	clz	r2, r2
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f002 021f 	and.w	r2, r2, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f202 	lsl.w	r2, r1, r2
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0b7      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80020a2:	4b5e      	ldr	r3, [pc, #376]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	495b      	ldr	r1, [pc, #364]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020bc:	4b57      	ldr	r3, [pc, #348]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80020c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d4:	4b51      	ldr	r3, [pc, #324]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	f023 0203 	bic.w	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	494e      	ldr	r1, [pc, #312]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f2:	4b4a      	ldr	r3, [pc, #296]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f023 0210 	bic.w	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	4947      	ldr	r1, [pc, #284]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002100:	4313      	orrs	r3, r2
 8002102:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002110:	4b42      	ldr	r3, [pc, #264]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	493f      	ldr	r1, [pc, #252]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d008      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f023 0220 	bic.w	r2, r3, #32
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	4938      	ldr	r1, [pc, #224]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800213c:	4313      	orrs	r3, r2
 800213e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800214c:	4b33      	ldr	r3, [pc, #204]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	4930      	ldr	r1, [pc, #192]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800215a:	4313      	orrs	r3, r2
 800215c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800216a:	4b2c      	ldr	r3, [pc, #176]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4929      	ldr	r1, [pc, #164]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4921      	ldr	r1, [pc, #132]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002196:	4313      	orrs	r3, r2
 8002198:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	491a      	ldr	r1, [pc, #104]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	4912      	ldr	r1, [pc, #72]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	490b      	ldr	r1, [pc, #44]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	4903      	ldr	r1, [pc, #12]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800220e:	4313      	orrs	r3, r2
 8002210:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3748      	adds	r7, #72	; 0x48
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000

08002220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e049      	b.n	80022c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe f926 	bl	8000498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3304      	adds	r3, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4610      	mov	r0, r2
 8002260:	f000 f9d2 	bl	8002608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d001      	beq.n	80022e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e03b      	b.n	8002360 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <HAL_TIM_Base_Start_IT+0x9c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d009      	beq.n	800231e <HAL_TIM_Base_Start_IT+0x4e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d004      	beq.n	800231e <HAL_TIM_Base_Start_IT+0x4e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a15      	ldr	r2, [pc, #84]	; (8002370 <HAL_TIM_Base_Start_IT+0xa0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d115      	bne.n	800234a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_TIM_Base_Start_IT+0xa4>)
 8002326:	4013      	ands	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b06      	cmp	r3, #6
 800232e:	d015      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x8c>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002336:	d011      	beq.n	800235c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002348:	e008      	b.n	800235c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	e000      	b.n	800235e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800235c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40014000 	.word	0x40014000
 8002374:	00010007 	.word	0x00010007

08002378 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d122      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b02      	cmp	r3, #2
 800239a:	d11b      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0202 	mvn.w	r2, #2
 80023a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f905 	bl	80025ca <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f8f7 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f908 	bl	80025de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d122      	bne.n	8002428 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d11b      	bne.n	8002428 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0204 	mvn.w	r2, #4
 80023f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f8db 	bl	80025ca <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8cd 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f8de 	bl	80025de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b08      	cmp	r3, #8
 8002434:	d122      	bne.n	800247c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b08      	cmp	r3, #8
 8002442:	d11b      	bne.n	800247c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0208 	mvn.w	r2, #8
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2204      	movs	r2, #4
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f8b1 	bl	80025ca <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8a3 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f8b4 	bl	80025de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b10      	cmp	r3, #16
 8002488:	d122      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b10      	cmp	r3, #16
 8002496:	d11b      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0210 	mvn.w	r2, #16
 80024a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2208      	movs	r2, #8
 80024a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f887 	bl	80025ca <HAL_TIM_IC_CaptureCallback>
 80024bc:	e005      	b.n	80024ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f879 	bl	80025b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f88a 	bl	80025de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0201 	mvn.w	r2, #1
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fd ff94 	bl	8000424 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	d10e      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002514:	2b80      	cmp	r3, #128	; 0x80
 8002516:	d107      	bne.n	8002528 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8e8 	bl	80026f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002536:	d10e      	bne.n	8002556 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002542:	2b80      	cmp	r3, #128	; 0x80
 8002544:	d107      	bne.n	8002556 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800254e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f8db 	bl	800270c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b40      	cmp	r3, #64	; 0x40
 8002562:	d10e      	bne.n	8002582 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d107      	bne.n	8002582 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800257a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f838 	bl	80025f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b20      	cmp	r3, #32
 800258e:	d10e      	bne.n	80025ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b20      	cmp	r3, #32
 800259c:	d107      	bne.n	80025ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f06f 0220 	mvn.w	r2, #32
 80025a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f89b 	bl	80026e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a2e      	ldr	r2, [pc, #184]	; (80026d4 <TIM_Base_SetConfig+0xcc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <TIM_Base_SetConfig+0x20>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002626:	d108      	bne.n	800263a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <TIM_Base_SetConfig+0xcc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00f      	beq.n	8002662 <TIM_Base_SetConfig+0x5a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002648:	d00b      	beq.n	8002662 <TIM_Base_SetConfig+0x5a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <TIM_Base_SetConfig+0xd0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d007      	beq.n	8002662 <TIM_Base_SetConfig+0x5a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a21      	ldr	r2, [pc, #132]	; (80026dc <TIM_Base_SetConfig+0xd4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <TIM_Base_SetConfig+0x5a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <TIM_Base_SetConfig+0xd8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d108      	bne.n	8002674 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <TIM_Base_SetConfig+0xcc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00b      	beq.n	80026b8 <TIM_Base_SetConfig+0xb0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <TIM_Base_SetConfig+0xd0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d007      	beq.n	80026b8 <TIM_Base_SetConfig+0xb0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <TIM_Base_SetConfig+0xd4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d003      	beq.n	80026b8 <TIM_Base_SetConfig+0xb0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a0b      	ldr	r2, [pc, #44]	; (80026e0 <TIM_Base_SetConfig+0xd8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d103      	bne.n	80026c0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	615a      	str	r2, [r3, #20]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40014400 	.word	0x40014400
 80026e0:	40014800 	.word	0x40014800

080026e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e040      	b.n	80027b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fd fece 	bl	80004e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	; 0x24
 800274c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0201 	bic.w	r2, r2, #1
 800275c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f82c 	bl	80027bc <UART_SetConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e022      	b.n	80027b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	2b00      	cmp	r3, #0
 8002774:	d002      	beq.n	800277c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f956 	bl	8002a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800278a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800279a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f9dd 	bl	8002b6c <UART_CheckIdleState>
 80027b2:	4603      	mov	r3, r0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4b8a      	ldr	r3, [pc, #552]	; (8002a10 <UART_SetConfig+0x254>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	6979      	ldr	r1, [r7, #20]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	430a      	orrs	r2, r1
 800282c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a78      	ldr	r2, [pc, #480]	; (8002a14 <UART_SetConfig+0x258>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d120      	bne.n	800287a <UART_SetConfig+0xbe>
 8002838:	4b77      	ldr	r3, [pc, #476]	; (8002a18 <UART_SetConfig+0x25c>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b03      	cmp	r3, #3
 8002842:	d817      	bhi.n	8002874 <UART_SetConfig+0xb8>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <UART_SetConfig+0x90>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	0800285d 	.word	0x0800285d
 8002850:	08002869 	.word	0x08002869
 8002854:	0800286f 	.word	0x0800286f
 8002858:	08002863 	.word	0x08002863
 800285c:	2300      	movs	r3, #0
 800285e:	77fb      	strb	r3, [r7, #31]
 8002860:	e01d      	b.n	800289e <UART_SetConfig+0xe2>
 8002862:	2302      	movs	r3, #2
 8002864:	77fb      	strb	r3, [r7, #31]
 8002866:	e01a      	b.n	800289e <UART_SetConfig+0xe2>
 8002868:	2304      	movs	r3, #4
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e017      	b.n	800289e <UART_SetConfig+0xe2>
 800286e:	2308      	movs	r3, #8
 8002870:	77fb      	strb	r3, [r7, #31]
 8002872:	e014      	b.n	800289e <UART_SetConfig+0xe2>
 8002874:	2310      	movs	r3, #16
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e011      	b.n	800289e <UART_SetConfig+0xe2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a67      	ldr	r2, [pc, #412]	; (8002a1c <UART_SetConfig+0x260>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d102      	bne.n	800288a <UART_SetConfig+0xce>
 8002884:	2300      	movs	r3, #0
 8002886:	77fb      	strb	r3, [r7, #31]
 8002888:	e009      	b.n	800289e <UART_SetConfig+0xe2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a64      	ldr	r2, [pc, #400]	; (8002a20 <UART_SetConfig+0x264>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d102      	bne.n	800289a <UART_SetConfig+0xde>
 8002894:	2300      	movs	r3, #0
 8002896:	77fb      	strb	r3, [r7, #31]
 8002898:	e001      	b.n	800289e <UART_SetConfig+0xe2>
 800289a:	2310      	movs	r3, #16
 800289c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a6:	d15b      	bne.n	8002960 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80028a8:	7ffb      	ldrb	r3, [r7, #31]
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d827      	bhi.n	80028fe <UART_SetConfig+0x142>
 80028ae:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <UART_SetConfig+0xf8>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	080028d9 	.word	0x080028d9
 80028b8:	080028e1 	.word	0x080028e1
 80028bc:	080028e9 	.word	0x080028e9
 80028c0:	080028ff 	.word	0x080028ff
 80028c4:	080028ef 	.word	0x080028ef
 80028c8:	080028ff 	.word	0x080028ff
 80028cc:	080028ff 	.word	0x080028ff
 80028d0:	080028ff 	.word	0x080028ff
 80028d4:	080028f7 	.word	0x080028f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028d8:	f7ff facc 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 80028dc:	61b8      	str	r0, [r7, #24]
        break;
 80028de:	e013      	b.n	8002908 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028e0:	f7ff faea 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 80028e4:	61b8      	str	r0, [r7, #24]
        break;
 80028e6:	e00f      	b.n	8002908 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028e8:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <UART_SetConfig+0x268>)
 80028ea:	61bb      	str	r3, [r7, #24]
        break;
 80028ec:	e00c      	b.n	8002908 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028ee:	f7ff fa4b 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 80028f2:	61b8      	str	r0, [r7, #24]
        break;
 80028f4:	e008      	b.n	8002908 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028fa:	61bb      	str	r3, [r7, #24]
        break;
 80028fc:	e004      	b.n	8002908 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80028fe:	2300      	movs	r3, #0
 8002900:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	77bb      	strb	r3, [r7, #30]
        break;
 8002906:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d074      	beq.n	80029f8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	005a      	lsls	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	085b      	lsrs	r3, r3, #1
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	b29b      	uxth	r3, r3
 8002924:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d916      	bls.n	800295a <UART_SetConfig+0x19e>
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002932:	d212      	bcs.n	800295a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f023 030f 	bic.w	r3, r3, #15
 800293c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	b29b      	uxth	r3, r3
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	b29a      	uxth	r2, r3
 800294a:	89fb      	ldrh	r3, [r7, #14]
 800294c:	4313      	orrs	r3, r2
 800294e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	89fa      	ldrh	r2, [r7, #14]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	e04e      	b.n	80029f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	77bb      	strb	r3, [r7, #30]
 800295e:	e04b      	b.n	80029f8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002960:	7ffb      	ldrb	r3, [r7, #31]
 8002962:	2b08      	cmp	r3, #8
 8002964:	d827      	bhi.n	80029b6 <UART_SetConfig+0x1fa>
 8002966:	a201      	add	r2, pc, #4	; (adr r2, 800296c <UART_SetConfig+0x1b0>)
 8002968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296c:	08002991 	.word	0x08002991
 8002970:	08002999 	.word	0x08002999
 8002974:	080029a1 	.word	0x080029a1
 8002978:	080029b7 	.word	0x080029b7
 800297c:	080029a7 	.word	0x080029a7
 8002980:	080029b7 	.word	0x080029b7
 8002984:	080029b7 	.word	0x080029b7
 8002988:	080029b7 	.word	0x080029b7
 800298c:	080029af 	.word	0x080029af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002990:	f7ff fa70 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8002994:	61b8      	str	r0, [r7, #24]
        break;
 8002996:	e013      	b.n	80029c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002998:	f7ff fa8e 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 800299c:	61b8      	str	r0, [r7, #24]
        break;
 800299e:	e00f      	b.n	80029c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <UART_SetConfig+0x268>)
 80029a2:	61bb      	str	r3, [r7, #24]
        break;
 80029a4:	e00c      	b.n	80029c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029a6:	f7ff f9ef 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 80029aa:	61b8      	str	r0, [r7, #24]
        break;
 80029ac:	e008      	b.n	80029c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b2:	61bb      	str	r3, [r7, #24]
        break;
 80029b4:	e004      	b.n	80029c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	77bb      	strb	r3, [r7, #30]
        break;
 80029be:	bf00      	nop
    }

    if (pclk != 0U)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d018      	beq.n	80029f8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	085a      	lsrs	r2, r3, #1
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	441a      	add	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	b29b      	uxth	r3, r3
 80029da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b0f      	cmp	r3, #15
 80029e0:	d908      	bls.n	80029f4 <UART_SetConfig+0x238>
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	d204      	bcs.n	80029f4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	e001      	b.n	80029f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a04:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	efff69f3 	.word	0xefff69f3
 8002a14:	40013800 	.word	0x40013800
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40004400 	.word	0x40004400
 8002a20:	40004800 	.word	0x40004800
 8002a24:	007a1200 	.word	0x007a1200

08002a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01a      	beq.n	8002b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b26:	d10a      	bne.n	8002b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]
  }
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b7c:	f7fd fdbe 	bl	80006fc <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b08      	cmp	r3, #8
 8002b8e:	d10e      	bne.n	8002bae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f82d 	bl	8002bfe <UART_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e023      	b.n	8002bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d10e      	bne.n	8002bda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f817 	bl	8002bfe <UART_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e00d      	b.n	8002bf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b09c      	sub	sp, #112	; 0x70
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0e:	e0a5      	b.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	f000 80a1 	beq.w	8002d5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1a:	f7fd fd6f 	bl	80006fc <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <UART_WaitOnFlagUntilTimeout+0x32>
 8002c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d13e      	bne.n	8002cae <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c44:	667b      	str	r3, [r7, #100]	; 0x64
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e6      	bne.n	8002c30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3308      	adds	r3, #8
 8002c68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	663b      	str	r3, [r7, #96]	; 0x60
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3308      	adds	r3, #8
 8002c80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c82:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c8a:	e841 2300 	strex	r3, r2, [r1]
 8002c8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1e5      	bne.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e067      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d04f      	beq.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cca:	d147      	bne.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cfc:	e841 2300 	strex	r3, r2, [r1]
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e6      	bne.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	e853 3f00 	ldrex	r3, [r3]
 8002d16:	613b      	str	r3, [r7, #16]
   return(result);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f023 0301 	bic.w	r3, r3, #1
 8002d1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3308      	adds	r3, #8
 8002d26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d28:	623a      	str	r2, [r7, #32]
 8002d2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2c:	69f9      	ldr	r1, [r7, #28]
 8002d2e:	6a3a      	ldr	r2, [r7, #32]
 8002d30:	e841 2300 	strex	r3, r2, [r1]
 8002d34:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1e5      	bne.n	8002d08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e010      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4013      	ands	r3, r2
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	f43f af4a 	beq.w	8002c10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3770      	adds	r7, #112	; 0x70
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <__libc_init_array>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	4d0d      	ldr	r5, [pc, #52]	; (8002dc0 <__libc_init_array+0x38>)
 8002d8c:	4c0d      	ldr	r4, [pc, #52]	; (8002dc4 <__libc_init_array+0x3c>)
 8002d8e:	1b64      	subs	r4, r4, r5
 8002d90:	10a4      	asrs	r4, r4, #2
 8002d92:	2600      	movs	r6, #0
 8002d94:	42a6      	cmp	r6, r4
 8002d96:	d109      	bne.n	8002dac <__libc_init_array+0x24>
 8002d98:	4d0b      	ldr	r5, [pc, #44]	; (8002dc8 <__libc_init_array+0x40>)
 8002d9a:	4c0c      	ldr	r4, [pc, #48]	; (8002dcc <__libc_init_array+0x44>)
 8002d9c:	f000 f820 	bl	8002de0 <_init>
 8002da0:	1b64      	subs	r4, r4, r5
 8002da2:	10a4      	asrs	r4, r4, #2
 8002da4:	2600      	movs	r6, #0
 8002da6:	42a6      	cmp	r6, r4
 8002da8:	d105      	bne.n	8002db6 <__libc_init_array+0x2e>
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
 8002dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db0:	4798      	blx	r3
 8002db2:	3601      	adds	r6, #1
 8002db4:	e7ee      	b.n	8002d94 <__libc_init_array+0xc>
 8002db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dba:	4798      	blx	r3
 8002dbc:	3601      	adds	r6, #1
 8002dbe:	e7f2      	b.n	8002da6 <__libc_init_array+0x1e>
 8002dc0:	08002e30 	.word	0x08002e30
 8002dc4:	08002e30 	.word	0x08002e30
 8002dc8:	08002e30 	.word	0x08002e30
 8002dcc:	08002e34 	.word	0x08002e34

08002dd0 <memset>:
 8002dd0:	4402      	add	r2, r0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d100      	bne.n	8002dda <memset+0xa>
 8002dd8:	4770      	bx	lr
 8002dda:	f803 1b01 	strb.w	r1, [r3], #1
 8002dde:	e7f9      	b.n	8002dd4 <memset+0x4>

08002de0 <_init>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr

08002dec <_fini>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr
